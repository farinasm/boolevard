{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Quick Start"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1 style=\"margin-bottom: 50px;\"><b> BooLEVARD Tutorials</b></h1>\n",
    "<h5 style=\"margin-bottom: 2px; margin-top: 0px;\">\n",
    "    <b><span style=\"color: green;\">[Tutorial 1]</span> <span>Quick Start: Finding vulnerabilities in a Cybersecurity model</b></span>\n",
    "</h5>\n",
    "<p>\n",
    "    In this tutorial, we will explore a small Boolean model designed to simulate different cybersecurity scenarios. The model consists of nodes representing key components of a cybersecurity system, and the goal of this tutorial is to evaluate how different conditions and guidelines affect the overall security state of the system.\n",
    "</p>\n",
    "<p>\n",
    "    The model includes the following nodes: <br><br>\n",
    "    <ul>\n",
    "        <li> Inputs: \n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Security_Policies</code>,\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">User_Education</code>,\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Network_Monitoring</code>, and\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Security_Patches</code>.<br><br>\n",
    "        <li> Internal nodes:\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Backups</code>,\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Malware</code>,\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Firewall</code>,\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Unauthorized_Access</code>,\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Exploits</code>,\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Antivirus</code>,\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Strong_Password</code>,\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">TwoFactAut</code>, and\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Phishing_Attack</code>.<br><br>\n",
    "        <li> Output nodes:\n",
    "            <code style=\"font-size: 14px; margin-bottom: 100px\">Security_State</code>.\n",
    "    </ul>\n",
    "\n",
    "</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/marco/.local/lib/python3.11/site-packages/pandas/core/arrays/masked.py:60: UserWarning: Pandas requires version '1.3.6' or newer of 'bottleneck' (version '1.3.5' currently installed).\n",
      "  from pandas.core import (\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<script type=\"text/javascript\" id=\"colomoto-setup-2940573\" class=\"to-be-removed\">\n",
       "        if (typeof Jupyter != 'undefined') {\n",
       "            \n",
       "function detect_import(cell, module) {\n",
       "    var code = cell.get_text();\n",
       "    code = code.replace(/\\\\\\n/g, \"\");\n",
       "    var lines = code.split(\"\\n\");\n",
       "    var r_simple = new RegExp(\"^(\"+module+\")$\");\n",
       "    var r_alias = new RegExp(\"^\"+module+\"\\\\s+as\\\\s+(\\\\w+)$\");\n",
       "    for (var i = 0; i < lines.length; ++i) {\n",
       "        if (/^import\\s/.test(lines[i])) {\n",
       "            code = lines[i].substr(7);\n",
       "            var parts = code.split(\",\")\n",
       "            for (var j = 0; j < parts.length; ++j) {\n",
       "                code = parts[j].trim();\n",
       "                var m = code.match(r_simple);\n",
       "                if (!m) {\n",
       "                    m = code.match(r_alias);\n",
       "                }\n",
       "                if (m) {\n",
       "                    return m[1];\n",
       "                }\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "    return module;\n",
       "}\n",
       "\n",
       "function colomoto_replace_call(cell, orig, dest, args, comment=false) {\n",
       "    var call_regexp = new RegExp(\"\\\\.\"+orig.replace(\".\",\"\\\\.\")+\"\\\\(\");\n",
       "    var call_replacer = new RegExp(\"\\\\.\"+orig.replace(\".\",\"\\\\.\")\n",
       "                    + \"\\\\(\\\\s*([^\\\\)]*)?\\\\)\");\n",
       "    var code = cell.get_text();\n",
       "    var lines = code.split(\"\\n\");\n",
       "    if (args) {\n",
       "        var strargs = \", \"+args.join(\", \");\n",
       "    } else {\n",
       "        var strargs = \"\";\n",
       "    }\n",
       "    for (var i = 0; i < lines.length; ++i) {\n",
       "        if (call_regexp.test(lines[i])) {\n",
       "            var code = \"\"\n",
       "            if (comment) {\n",
       "                code += \"#\"+lines[i]+\"\\n\";\n",
       "            }\n",
       "            code += lines[i].replace(call_replacer, \".\"+dest+\"($1\"+strargs+\")\")\n",
       "            lines[i] = code;\n",
       "        }\n",
       "    }\n",
       "    cell.set_text(code)\n",
       "}\n",
       "\n",
       "function colomoto_upload(Jupyter, ssid, input, py_callback_name, orig, dest) {\n",
       "\n",
       "    function callback(out_data) {\n",
       "        var cell_element = $(\"#\"+ssid).parents('.cell');\n",
       "        var cell_idx = Jupyter.notebook.get_cell_elements().index(cell_element);\n",
       "        var cell = Jupyter.notebook.get_cell(cell_idx);\n",
       "\n",
       "        var filename = out_data.content.text;\n",
       "\n",
       "        var code = cell.get_text();\n",
       "        code = code.replace(new RegExp(\"\\\\b\" + orig.replace('.', '\\\\.')\n",
       "                    + \"\\\\(\\\\s*((\\\\w+)=[^\\\\)]*)?\\\\)\"),\n",
       "                dest+\"(\\\"\"+filename+\"\\\",$1)\");\n",
       "        code = code.replace('\",)', '\")')\n",
       "        cell.set_text(code);\n",
       "\n",
       "        Jupyter.notebook.select(cell_idx);\n",
       "        Jupyter.notebook.execute_cell_and_select_below();\n",
       "    }\n",
       "\n",
       "    if (! (window.File && window.FileReader && window.FileList && window.Blob)) {\n",
       "        alert(\"Interactive file upload is not supported by your browser.\");\n",
       "        return;\n",
       "    }\n",
       "\n",
       "    input.disabled = true;\n",
       "    input.style.cursor = \"wait\";\n",
       "    input.parentElement.style.cursor = \"wait\";\n",
       "\n",
       "    var f = input.files[0];\n",
       "    var reader = new FileReader();\n",
       "    reader.onload = (function(f) {\n",
       "        return function (e) {\n",
       "            var obj = {\n",
       "                content: e.target.result,\n",
       "                name: f.name\n",
       "            };\n",
       "\n",
       "            //var pycb = py_callback_name+\"(\"+JSON.stringify(obj)+\")\"\n",
       "            // hack/workaround:\n",
       "            // it seems that Jupyter does not like very long lines\n",
       "            // so we split the data in chunks\n",
       "            var chunk_length = 100;\n",
       "            var pycb = \"__colomoto_upload_name = \" + JSON.stringify(obj.name) + \"\\n\";\n",
       "            pycb += \"__colomoto_upload_content = \\\\\\n\";\n",
       "            for (var i = 0; i < obj.content.length; i += chunk_length) {\n",
       "                pycb += \"\\\"\" + obj.content.substr(i, chunk_length)+\"\\\"\\\\\\n\"\n",
       "            }\n",
       "            pycb += \"\\n\"\n",
       "            pycb += py_callback_name+\"({'name':__colomoto_upload_name, 'content': __colomoto_upload_content})\\n\";\n",
       "            pycb += \"del __colomoto_upload_name, __colomoto_upload_content\"\n",
       "\n",
       "            IPython.notebook.kernel.execute(pycb, {iopub: {output: callback}});\n",
       "        };\n",
       "    })(f);\n",
       "    reader.readAsDataURL(f);\n",
       "}\n",
       "\n",
       "function resolve_function(tool_api, funcname) {\n",
       "    if (tool_api.hasOwnProperty(funcname)) {\n",
       "        return tool_api[funcname];\n",
       "    } else {\n",
       "        return window[funcname];\n",
       "    }\n",
       "}\n",
       "\n",
       "function colomoto_extension(Jupyter, ssid, name, menu, toolbar, tool_api) {\n",
       "\n",
       "    function insert_snippet_code(snippet) {\n",
       "        var cell = Jupyter.notebook.get_selected_cell();\n",
       "        Jupyter.notebook.edit_mode();\n",
       "        cell.code_mirror.replaceSelection(snippet, 'around');\n",
       "        //cell.focus_editor();\n",
       "    }\n",
       "\n",
       "    /**\n",
       "        from https://github.com/moble/jupyter_boilerplate/blob/master/main.js\n",
       "    */\n",
       "    function callback_insert_snippet (evt) {\n",
       "        // this (or event.currentTarget, see below) always refers to the DOM\n",
       "        // element the listener was attached to - see\n",
       "        // http://stackoverflow.com/questions/12077859\n",
       "        insert_snippet_code($(evt.currentTarget).data('snippet-code'));\n",
       "    }\n",
       "    function build_menu_element (menu_item_spec, direction) {\n",
       "        // Create the menu item html element\n",
       "        var element = $('<li/>');\n",
       "\n",
       "        if (typeof menu_item_spec == 'string') {\n",
       "            if (menu_item_spec != '---') {\n",
       "                return element.html(menu_item_spec)\n",
       "                        .addClass('ui-state-disabled')\n",
       "                        .attr({\"style\": \"padding:2px .4em\"})\n",
       "                       ;\n",
       "            }\n",
       "            return element.addClass('divider');\n",
       "        }\n",
       "\n",
       "        var a = $('<a/>')\n",
       "            .attr('href', '#')\n",
       "            .html(menu_item_spec.name)\n",
       "            .appendTo(element);\n",
       "        if (menu_item_spec.hasOwnProperty('snippet')) {\n",
       "            var snippet = menu_item_spec.snippet;\n",
       "            if (typeof snippet == 'string' || snippet instanceof String) {\n",
       "                snippet = [snippet];\n",
       "            }\n",
       "            a.attr({\n",
       "                'title' : \"\", // Do not remove this, even though it's empty!\n",
       "                'data-snippet-code' : snippet.join('\\n'),\n",
       "            })\n",
       "            .on('click', callback_insert_snippet)\n",
       "            .addClass('snippet');\n",
       "        }\n",
       "        else if (menu_item_spec.hasOwnProperty('internal-link')) {\n",
       "            a.attr('href', menu_item_spec['internal-link']);\n",
       "        }\n",
       "        else if (menu_item_spec.hasOwnProperty('external-link')) {\n",
       "            a.empty();\n",
       "            a.attr('href', menu_item_spec['external-link']);\n",
       "            a.attr({\n",
       "                'target' : '_blank',\n",
       "                'title' : 'Opens in a new window',\n",
       "            });\n",
       "            $('<i class=\"fa fa-external-link menu-icon pull-right\"/>').appendTo(a);\n",
       "            $('<span/>').html(menu_item_spec.name).appendTo(a);\n",
       "        }\n",
       "\n",
       "        if (menu_item_spec.hasOwnProperty('sub-menu')) {\n",
       "            element\n",
       "                .addClass('dropdown-submenu')\n",
       "                .toggleClass('dropdown-submenu-left', direction === 'left');\n",
       "            var sub_element = $('<ul class=\"dropdown-menu\"/>')\n",
       "                .toggleClass('dropdown-menu-compact', menu_item_spec.overlay === true) // For space-saving menus\n",
       "                .appendTo(element);\n",
       "\n",
       "            var new_direction = (menu_item_spec['sub-menu-direction'] === 'left') ? 'left' : 'right';\n",
       "            for (var j=0; j<menu_item_spec['sub-menu'].length; ++j) {\n",
       "                var sub_menu_item_spec = build_menu_element(menu_item_spec['sub-menu'][j], new_direction);\n",
       "                if(sub_menu_item_spec !== null) {\n",
       "                    sub_menu_item_spec.appendTo(sub_element);\n",
       "                }\n",
       "            }\n",
       "        }\n",
       "\n",
       "        return element;\n",
       "    }\n",
       "\n",
       "    function menu_setup (menu_item_specs, sibling, insert_before_sibling) {\n",
       "        for (var i=0; i<menu_item_specs.length; ++i) {\n",
       "            var menu_item_spec;\n",
       "            if (insert_before_sibling) {\n",
       "                menu_item_spec = menu_item_specs[i];\n",
       "            } else {\n",
       "                menu_item_spec = menu_item_specs[menu_item_specs.length-1-i];\n",
       "            }\n",
       "            var direction = (menu_item_spec['menu-direction'] == 'left') ? 'left' : 'right';\n",
       "            var menu_element = build_menu_element(menu_item_spec, direction);\n",
       "            // We need special properties if this item is in the navbar\n",
       "            if ($(sibling).parent().is('ul.nav.navbar-nav')) {\n",
       "                menu_element\n",
       "                    .addClass('dropdown')\n",
       "                    .removeClass('dropdown-submenu dropdown-submenu-left');\n",
       "                menu_element.children('a')\n",
       "                    .addClass('dropdown-toggle')\n",
       "                    .attr({\n",
       "                        'id': name+'_menu',\n",
       "                        'data-toggle' : 'dropdown',\n",
       "                        'aria-expanded' : 'false'\n",
       "                    });\n",
       "            }\n",
       "\n",
       "            // Insert the menu element into DOM\n",
       "            menu_element[insert_before_sibling ? 'insertBefore': 'insertAfter'](sibling);\n",
       "        }\n",
       "    }\n",
       "    /** end from */\n",
       "\n",
       "\n",
       "    function self_cleanup() {\n",
       "        var cell_element = $(\"script[class='to-be-removed']\").parents('.cell');\n",
       "        var cell_idx = Jupyter.notebook.get_cell_elements().index(cell_element);\n",
       "        var cell = Jupyter.notebook.get_cell(cell_idx);\n",
       "        var to_remove = -1;\n",
       "        for (var i = 0; i < cell.output_area.outputs.length; ++i) {\n",
       "            var oa = cell.output_area.outputs[i];\n",
       "            if (oa.output_type == \"display_data\"\n",
       "                && typeof oa.data[\"text/html\"] != 'undefined'\n",
       "                && oa.data[\"text/html\"].indexOf(' class=\"to-be-removed\"') >= 0) {\n",
       "                to_remove = i;\n",
       "                break;\n",
       "            }\n",
       "        }\n",
       "        if (to_remove == -1) {\n",
       "            console.log(\"cannot find toberemoved\");\n",
       "        } else {\n",
       "            cell.output_area.outputs.splice(to_remove, 1);\n",
       "        }\n",
       "    }\n",
       "\n",
       "    function toolbar_setup(actions) {\n",
       "        var buttons = [];\n",
       "        for (var i = 0; i < actions.length; ++i) {\n",
       "            var setup = actions[i].setup;\n",
       "            if (typeof setup.handler == 'string') {\n",
       "                setup.handler = resolve_function(tool_api, setup.handler);\n",
       "            }\n",
       "            buttons.push(Jupyter.actions.register(actions[i].setup,\n",
       "                actions[i].name, name));\n",
       "        }\n",
       "        $(\"#\"+name+\"-toolbar\").remove();\n",
       "        Jupyter.toolbar.add_buttons_group(buttons, name+\"-toolbar\");\n",
       "    }\n",
       "\n",
       "    function replace_menu_snippets(menu_spec, orig, dest) {\n",
       "        if (menu_spec.hasOwnProperty(\"snippet\")) {\n",
       "            var snippet = menu_spec.snippet;\n",
       "            if (typeof snippet == \"string\" || snippet instanceof String) {\n",
       "                menu_spec[\"snippet\"] = snippet.replace(orig, dest);\n",
       "            } else {\n",
       "                for (var i = 0; i < snippet.length; ++i) {\n",
       "                    menu_spec[\"snippet\"][i] = snippet[i].replace(orig, dest);\n",
       "                }\n",
       "            }\n",
       "        }\n",
       "        if (menu_spec.hasOwnProperty(\"sub-menu\")) {\n",
       "            for (var i = 0; i < menu_spec[\"sub-menu\"].length; ++i) {\n",
       "                replace_menu_snippets(menu_spec[\"sub-menu\"][i], orig, dest);\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "\n",
       "    function load_ipython_extension() {\n",
       "\n",
       "        var mycellelt = $(\"#\"+ssid).parents('.cell');\n",
       "        var myidx = Jupyter.notebook.get_cell_elements().index(mycellelt);\n",
       "        var import_cell = Jupyter.notebook.get_cell(myidx);\n",
       "\n",
       "        var alias = detect_import(import_cell, name);\n",
       "        tool_api.module_alias = alias;\n",
       "        if (alias && alias != name) {\n",
       "            var orig = new RegExp(\"\\\\b\"+name+\"\\\\b\", \"g\");\n",
       "            replace_menu_snippets(menu, orig, alias);\n",
       "        }\n",
       "\n",
       "        if (toolbar) {\n",
       "            toolbar_setup(toolbar);\n",
       "        }\n",
       "\n",
       "        $(\"#\"+name+\"_menu\").parent().remove();\n",
       "        if (menu) {\n",
       "            menu_setup([menu], $(\"#help_menu\").parent(), true);\n",
       "        }\n",
       "\n",
       "        if (tool_api.hasOwnProperty(\"post_install_callback\")) {\n",
       "            tool_api.post_install_callback();\n",
       "        }\n",
       "\n",
       "        setTimeout(self_cleanup, 5000);\n",
       "    };\n",
       "\n",
       "    load_ipython_extension();\n",
       "}\n",
       "\n",
       "function resolve_toolbar_handlers(tool_api, toolbar_spec) {\n",
       "    for (var i = 0; i < toolbar_spec.length; ++i) {\n",
       "        func = resolve_function(tool_api, toolbar_spec[i][\"setup\"][\"handler\"]);\n",
       "        toolbar_spec[i][\"setup\"][\"handler\"] = func;\n",
       "    }\n",
       "    return toolbar_spec\n",
       "}\n",
       "\n",
       "\n",
       "    var minibn_jsapi = {  };\n",
       "    colomoto_extension(Jupyter, \"colomoto-setup-2940573\", \"minibn\", null, null, minibn_jsapi);\n",
       "     }</script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import boolevard as blv\n",
    "import pandas as pd\n",
    "from boolevard import CountPaths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = blv.Load(\"resources/security.bnet\") # Load the model (BoolNet format)\n",
    "check = [\"Security_State\"] # Set node(s) to check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>3</th>\n",
       "      <th>2</th>\n",
       "      <th>1</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>8</th>\n",
       "      <th>15</th>\n",
       "      <th>12</th>\n",
       "      <th>11</th>\n",
       "      <th>9</th>\n",
       "      <th>14</th>\n",
       "      <th>13</th>\n",
       "      <th>10</th>\n",
       "      <th>DNF</th>\n",
       "      <th>NDNF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>User_Education</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>User_Education</td>\n",
       "      <td>~User_Education</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Security_Policies</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Security_Policies</td>\n",
       "      <td>~Security_Policies</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Security_Patches</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Security_Patches</td>\n",
       "      <td>~Security_Patches</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Network_Monitoring</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Network_Monitoring</td>\n",
       "      <td>~Network_Monitoring</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Backups</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>And(~Malware, Security_Policies)</td>\n",
       "      <td>Or(Malware, ~Security_Policies)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Malware</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>And(~Antivirus, Exploits, ~Firewall, ~Strong_P...</td>\n",
       "      <td>Or(Antivirus, ~Exploits, Firewall, Strong_Pass...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Security_State</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>And(Backups, ~Unauthorized_Access)</td>\n",
       "      <td>Or(~Backups, Unauthorized_Access)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Firewall</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Or(Network_Monitoring, Security_Patches)</td>\n",
       "      <td>And(~Network_Monitoring, ~Security_Patches)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Unauthorized_Access</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Or(And(~Firewall, Malware, ~Strong_Password, ~...</td>\n",
       "      <td>Or(Firewall, Strong_Password, TwoFactAut, And(...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Exploits</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Or(~Strong_Password, ~TwoFactAut)</td>\n",
       "      <td>And(Strong_Password, TwoFactAut)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antivirus</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Or(Security_Patches, User_Education)</td>\n",
       "      <td>And(~Security_Patches, ~User_Education)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Strong_Password</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>User_Education</td>\n",
       "      <td>~User_Education</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TwoFactAut</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Or(Security_Policies, Strong_Password, User_Ed...</td>\n",
       "      <td>And(~Security_Policies, ~Strong_Password, ~Use...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phishing_Attack</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Or(~TwoFactAut, ~User_Education)</td>\n",
       "      <td>And(TwoFactAut, User_Education)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     0  3  2  1  6  7  4  5  8  15  12  11  9  14  13  10  \\\n",
       "User_Education       0  0  0  0  0  0  0  0  1   1   1   1  1   1   1   1   \n",
       "Security_Policies    0  0  0  0  1  1  1  1  0   0   0   0  1   1   1   1   \n",
       "Security_Patches     0  0  1  1  0  0  1  1  0   0   1   1  0   0   1   1   \n",
       "Network_Monitoring   0  1  0  1  0  1  0  1  0   1   0   1  0   1   0   1   \n",
       "Backups              0  0  0  0  0  1  1  1  0   0   0   0  1   1   1   1   \n",
       "Malware              1  0  0  0  1  0  0  0  0   0   0   0  0   0   0   0   \n",
       "Security_State       0  0  0  0  0  1  1  1  0   0   0   0  1   1   1   1   \n",
       "Firewall             0  1  1  1  0  1  1  1  0   1   1   1  0   1   1   1   \n",
       "Unauthorized_Access  1  0  0  0  0  0  0  0  0   0   0   0  0   0   0   0   \n",
       "Exploits             1  1  1  1  1  1  1  1  0   0   0   0  0   0   0   0   \n",
       "Antivirus            0  0  1  1  0  0  1  1  1   1   1   1  1   1   1   1   \n",
       "Strong_Password      0  0  0  0  0  0  0  0  1   1   1   1  1   1   1   1   \n",
       "TwoFactAut           0  0  0  0  1  1  1  1  1   1   1   1  1   1   1   1   \n",
       "Phishing_Attack      1  1  1  1  1  1  1  1  0   0   0   0  0   0   0   0   \n",
       "\n",
       "                                                                   DNF  \\\n",
       "User_Education                                          User_Education   \n",
       "Security_Policies                                    Security_Policies   \n",
       "Security_Patches                                      Security_Patches   \n",
       "Network_Monitoring                                  Network_Monitoring   \n",
       "Backups                               And(~Malware, Security_Policies)   \n",
       "Malware              And(~Antivirus, Exploits, ~Firewall, ~Strong_P...   \n",
       "Security_State                      And(Backups, ~Unauthorized_Access)   \n",
       "Firewall                      Or(Network_Monitoring, Security_Patches)   \n",
       "Unauthorized_Access  Or(And(~Firewall, Malware, ~Strong_Password, ~...   \n",
       "Exploits                             Or(~Strong_Password, ~TwoFactAut)   \n",
       "Antivirus                         Or(Security_Patches, User_Education)   \n",
       "Strong_Password                                         User_Education   \n",
       "TwoFactAut           Or(Security_Policies, Strong_Password, User_Ed...   \n",
       "Phishing_Attack                       Or(~TwoFactAut, ~User_Education)   \n",
       "\n",
       "                                                                  NDNF  \n",
       "User_Education                                         ~User_Education  \n",
       "Security_Policies                                   ~Security_Policies  \n",
       "Security_Patches                                     ~Security_Patches  \n",
       "Network_Monitoring                                 ~Network_Monitoring  \n",
       "Backups                                Or(Malware, ~Security_Policies)  \n",
       "Malware              Or(Antivirus, ~Exploits, Firewall, Strong_Pass...  \n",
       "Security_State                       Or(~Backups, Unauthorized_Access)  \n",
       "Firewall                   And(~Network_Monitoring, ~Security_Patches)  \n",
       "Unauthorized_Access  Or(Firewall, Strong_Password, TwoFactAut, And(...  \n",
       "Exploits                              And(Strong_Password, TwoFactAut)  \n",
       "Antivirus                      And(~Security_Patches, ~User_Education)  \n",
       "Strong_Password                                        ~User_Education  \n",
       "TwoFactAut           And(~Security_Policies, ~Strong_Password, ~Use...  \n",
       "Phishing_Attack                        And(TwoFactAut, User_Education)  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.Info"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>\n",
    "A total of 16 stable states are reached upon different input combinations. We will check the how secure our system is based on the number of paths leading to the activation or inactivation of the <code style=\"font-size:14px\">Security_State</code> node.\n",
    "</p> \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluating Stable State: 0\n",
      "Security_State: -35, 4.168351491292318e-06 minutes.\n",
      "Evaluating Stable State: 3\n",
      "Security_State: -1, 8.424123128255208e-07 minutes.\n",
      "Evaluating Stable State: 2\n",
      "Security_State: -1, 8.821487426757813e-07 minutes.\n",
      "Evaluating Stable State: 1\n",
      "Security_State: -1, 6.914138793945312e-07 minutes.\n",
      "Evaluating Stable State: 6\n",
      "Security_State: -6, 2.173582712809245e-06 minutes.\n",
      "Evaluating Stable State: 7\n",
      "Security_State: 4, 1.5695889790852864e-06 minutes.\n",
      "Evaluating Stable State: 4\n",
      "Security_State: 5, 1.9272168477376303e-06 minutes.\n",
      "Evaluating Stable State: 5\n",
      "Security_State: 7, 2.276897430419922e-06 minutes.\n",
      "Evaluating Stable State: 8\n",
      "Security_State: -1, 4.569689432779948e-07 minutes.\n",
      "Evaluating Stable State: 15\n",
      "Security_State: -1, 8.781750996907552e-07 minutes.\n",
      "Evaluating Stable State: 12\n",
      "Security_State: -1, 5.125999450683594e-07 minutes.\n",
      "Evaluating Stable State: 11\n",
      "Security_State: -1, 4.172325134277344e-07 minutes.\n",
      "Evaluating Stable State: 9\n",
      "Security_State: 21, 3.3338864644368488e-06 minutes.\n",
      "Evaluating Stable State: 14\n",
      "Security_State: 24, 2.0265579223632812e-06 minutes.\n",
      "Evaluating Stable State: 13\n",
      "Security_State: 26, 2.193450927734375e-06 minutes.\n",
      "Evaluating Stable State: 10\n",
      "Security_State: 29, 3.83456548055013e-06 minutes.\n"
     ]
    }
   ],
   "source": [
    "sec_status = model.CountPaths(check, ss_wise = True) # Average signed path counts leading to the local state of Security_State across all the stable states of the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>6</th>\n",
       "      <th>3</th>\n",
       "      <th>2</th>\n",
       "      <th>1</th>\n",
       "      <th>8</th>\n",
       "      <th>15</th>\n",
       "      <th>12</th>\n",
       "      <th>11</th>\n",
       "      <th>7</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>9</th>\n",
       "      <th>14</th>\n",
       "      <th>13</th>\n",
       "      <th>10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Security_State</th>\n",
       "      <td>-35</td>\n",
       "      <td>-6</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>21</td>\n",
       "      <td>24</td>\n",
       "      <td>26</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 0  6  3  2  1  8  15  12  11  7  4  5   9  14  13  10\n",
       "Security_State -35 -6 -1 -1 -1 -1  -1  -1  -1  4  5  7  21  24  26  29"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sort the security outcomes in ascending order\n",
    "security_outcomes = pd.DataFrame(sec_status, columns = [\"Security_State\"], index = model.Info.columns[:-2]).transpose().sort_values(by = \"Security_State\", axis = 1)\n",
    "security_outcomes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>6</th>\n",
       "      <th>3</th>\n",
       "      <th>2</th>\n",
       "      <th>1</th>\n",
       "      <th>8</th>\n",
       "      <th>15</th>\n",
       "      <th>12</th>\n",
       "      <th>11</th>\n",
       "      <th>7</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>9</th>\n",
       "      <th>14</th>\n",
       "      <th>13</th>\n",
       "      <th>10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>User_Education</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Security_Policies</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Security_Patches</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Network_Monitoring</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    0  6  3  2  1  8  15  12  11  7  4  5  9  14  13  10\n",
       "User_Education      0  0  0  0  0  1   1   1   1  0  0  0  1   1   1   1\n",
       "Security_Policies   0  1  0  0  0  0   0   0   0  1  1  1  1   1   1   1\n",
       "Security_Patches    0  0  0  1  1  0   0   1   1  0  1  1  0   0   1   1\n",
       "Network_Monitoring  0  0  1  0  1  0   1   0   1  1  0  1  0   1   0   1"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sort the stable states based on security outcomes and check the input configurations triggering them\n",
    "inputs = [\"User_Education\", \"Security_Policies\", \"Security_Patches\", \"Network_Monitoring\"]\n",
    "model.Info.loc[inputs, security_outcomes.columns]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<style>code{font-size: 14px}</style>\n",
    "<p>\n",
    "In the table above, we can see that the absence of all inputs simultaneously results in the worst security outcome <b>(SS = 0, Path count = 35)</b>. Activating any single input is not sufficient to change the inactive state of <code>Security_States</code>, although it reduces the number of paths leading to inactivation to one, except for <code>Security_Policies</code>, which leads to a slightly improved outcome <b>(SS = 6, Path count = -6)</b>. <br><br>\n",
    "Most input combinations result in a positive security state, except for the combination of <code>Security_Patches</code> and <code>Network_Monitoring</code>. The strongest security state occurs when all inputs are active, but the combination of <code>User_Education</code>, <code>Security_Policies</code>, and any additional input is enough to trigger almost the maximum observed secure paths.\n",
    "<p>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<style>code{font-size: 14px}</style>\n",
    "<p>\n",
    "Lastly, we will examine how common scenarios impact security, either by reducing the number of activating paths or shifting the system toward insecurity. To do so, we will perturb the model by simulating virus triggers and system bugs affecting the defenders, introducing additive activations or inactivations of specific nodes.\n",
    "\n",
    "<code>BooLEVARD</code> allows for two types of perturbations: <b>non-additive</b>, where the perturbation completely overrides the target node’s regulation, and <b>additive</b>, where its regulatory effect is combined with the existing one. We will analyze the effects of these perturbations when all inputs are ON.\n",
    "</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluating Stable State: 29\n",
      "Security_State: 23, 2.5908152262369793e-06 minutes.\n",
      "Evaluating Stable State: 30\n",
      "Security_State: -1, 9.258588155110677e-07 minutes.\n",
      "Evaluating Stable State: 28\n",
      "Security_State: 21, 3.949801127115885e-06 minutes.\n",
      "Evaluating Stable State: 23\n",
      "Security_State: 25, 4.315376281738282e-06 minutes.\n",
      "Evaluating Stable State: 9\n",
      "Security_State: 16, 2.3404757181803385e-06 minutes.\n",
      "Evaluating Stable State: 27\n",
      "Security_State: 9, 2.642472585042318e-06 minutes.\n",
      "Evaluating Stable State: 28\n",
      "Security_State: 16, 2.3484230041503905e-06 minutes.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unauthorized_Access%ACT</th>\n",
       "      <th>TwoFactAut%INH</th>\n",
       "      <th>Strong_Password%INH</th>\n",
       "      <th>Phishing_Attack%ACT</th>\n",
       "      <th>Exploits%ACT</th>\n",
       "      <th>Firewall%INH</th>\n",
       "      <th>Antivirus%INH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Security_State</th>\n",
       "      <td>-1</td>\n",
       "      <td>9</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Unauthorized_Access%ACT  TwoFactAut%INH  Strong_Password%INH  \\\n",
       "Security_State                       -1               9                   16   \n",
       "\n",
       "                Phishing_Attack%ACT  Exploits%ACT  Firewall%INH  Antivirus%INH  \n",
       "Security_State                   16            21            23             25  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "perturbations = [\"Firewall%INH\", \"Unauthorized_Access%ACT\", \"Exploits%ACT\", \"Antivirus%INH\", \"Strong_Password%INH\", \"TwoFactAut%INH\", \"Phishing_Attack%ACT\"] # Define the perturbations\n",
    "res = []\n",
    "for p in perturbations:\n",
    "    pmodel = model.Pert(p, additive = True) # Perturb the model\n",
    "    pmodel.Info = pmodel.Info.loc[:, (pmodel.Info.loc[inputs] == 1).all(axis = 0) | pmodel.Info.columns.str.contains(\"DNF\")] # Retrieve only stable states reached when all inputs are on\n",
    "    \n",
    "    if len(pmodel.Info.columns) <= 2:\n",
    "        res.append(\"NA\")\n",
    "    else:\n",
    "        sec_status = pmodel.CountPaths(check, ss_wise = True)\n",
    "        res.append(sec_status)\n",
    "\n",
    "res = [item[0] for item in res]\n",
    "res = pd.DataFrame(res, index = perturbations, columns = [\"Security_State\"]).transpose().sort_values(by = \"Security_State\", axis = 1) # Store results in a dataframe\n",
    "res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<style>code{font-size: 14px}</style>\n",
    "<p>\n",
    "We observe that, except for the activation of <code>Unauthorized_Access</code>, all perturbations still allow for security, albeit with varying strengths. In this system, the loss of security strategies is predicted to have a greater impact than losing the antivirus or deactivating the firewall.\n",
    "<p>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "usr",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
